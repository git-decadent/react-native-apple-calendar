/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  class JSI_EXPORT NativeAppleCalendarCxxSpecJSI : public TurboModule {
protected:
  NativeAppleCalendarCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value requestPermissions(jsi::Runtime &rt) = 0;
  virtual jsi::Value fetchEvents(jsi::Runtime &rt) = 0;
  virtual jsi::Value addEvent(jsi::Runtime &rt, jsi::String text, jsi::String datetime, jsi::String location, jsi::Array people, std::optional<jsi::String> address, std::optional<double> notifyTime) = 0;

};

template <typename T>
class JSI_EXPORT NativeAppleCalendarCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativeAppleCalendarCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("RTNAppleCalendar", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeAppleCalendarCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeAppleCalendarCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Value requestPermissions(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::requestPermissions) == 1,
          "Expected requestPermissions(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestPermissions, jsInvoker_, instance_);
    }
    jsi::Value fetchEvents(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::fetchEvents) == 1,
          "Expected fetchEvents(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::fetchEvents, jsInvoker_, instance_);
    }
    jsi::Value addEvent(jsi::Runtime &rt, jsi::String text, jsi::String datetime, jsi::String location, jsi::Array people, std::optional<jsi::String> address, std::optional<double> notifyTime) override {
      static_assert(
          bridging::getParameterCount(&T::addEvent) == 7,
          "Expected addEvent(...) to have 7 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addEvent, jsInvoker_, instance_, std::move(text), std::move(datetime), std::move(location), std::move(people), std::move(address), std::move(notifyTime));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
